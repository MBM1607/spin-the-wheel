---
export interface Props extends astroHTML.JSX.ButtonHTMLAttributes {
  label?: string;
  color?: "default" | "primary" | "secondary";
  size?: "small" | "medium" | "large";
}
const { label, color, size = "medium", ...buttonProps } = Astro.props;
---

<button class:list={[color, size, buttonProps.class]} {...buttonProps}>
  {label ?? <slot />}
</button>
<style>
  button {
    --accent: var(--back);
    --color: var(--fore);
    --border-color: var(--black);
    --dark: var(--back-focus);
    --offset: calc(0.5 * var(--scale) * var(--spacing));

    all: unset;
    text-transform: capitalize;
    padding: 0.5em 1.5em;
    cursor: pointer;
    font-size: var(--font-size);
    box-shadow: calc(-1 * var(--offset)) var(--offset) 0 var(--fore);
    transform: translate(var(--offset), calc(-1 * var(--offset)));
    background-color: var(--accent);
    color: var(--color);
    border: 2px solid var(--border-color);
    margin: var(--offset);
    transition: background-color var(--transition), color var(--transition),
      border var(--transition), box-shadow var(--transition),
      margin var(--transition), transform var(--transition);
  }
  :root[data-theme="dark"] button {
    --border-color: var(--black-dark);
  }
  button:is(:hover, :focus-visible) {
    transform: none;
    box-shadow: none;
    background-color: var(--dark);
  }
  button:active {
    transform: scale(0.8);
  }
  .medium {
    --scale: 1;
    --font-size: 1em;
  }
  .small {
    --scale: 0.7;
    --font-size: 0.7em;
  }
  .large {
    --scale: 1.3;
    --font-size: 1.3em;
  }
  .primary {
    --accent: var(--primary);
    --color: var(--black);
    --dark: var(--primary-dark);
  }
  .secondary {
    --accent: var(--secondary);
    --color: var(--black);
    --dark: var(--secondary-dark);
  }
</style>
